import Menus from "../models/Menus.js";
import Sistemas from "../models/Sistemas.js";
import RolSistemaMenu from "../models/RolSistemaMenu.js";
import Roles from "../models/Roles.js";
import { Op } from "sequelize";

export const obtenerMenus = async (req, res) => {
  try {
    const menuRaiz = await Menus.findAll({
      where: { padreId: null, estado: true }, // solo men√∫s padres activos
      include: {
        model: Menus,
        as: "submenus",
        where: { estado: true },
        required: false,
        include: {
          model: Menus,
          as: "submenus",
          where: { estado: true },
          required: false,
          include: {
            model: Menus,
            as: "submenus",
            where: { estado: true },
            required: false,
          }
        }
      },
      order: [["id", "ASC"]],
    });

    res.json(menuRaiz);
  } catch (error) {
    console.error("Error al obtener el men√∫ jer√°rquico:", error);
    res.status(500).json({ message: "Error al obtener el √°rbol de men√∫s" });
  }
};

// Nuevo: Obtener men√∫s por rol y sistema
export const obtenerMenusPorRolYSistema = async (req, res) => {
  try {
    const { rolId, sistemaId } = req.params;

    if (!rolId || !sistemaId) {
      return res.status(400).json({ 
        message: "rolId y sistemaId son requeridos" 
      });
    }

    // Buscar men√∫s a trav√©s de RolSistemaMenu
    const menuPermissions = await RolSistemaMenu.findAll({
      where: {
        rolId: rolId,
        sistemaId: sistemaId,
        estado: true
      },
      include: {
        model: Menus,
        as: "menu",
        where: { estado: true },
        required: true
      }
    });

    // Extraer solo los men√∫s
    const menus = menuPermissions.map(permission => permission.menu);

    // Organizar en estructura jer√°rquica
    const menusJerarquicos = organizarMenusJerarquicos(menus);

    res.json(menusJerarquicos);
  } catch (error) {
    console.error("Error al obtener men√∫s por rol y sistema:", error);
    res.status(500).json({ message: "Error al obtener men√∫s filtrados" });
  }
};

// Nuevo: Obtener men√∫s por √°rea usuaria
export const obtenerMenusPorArea = async (req, res) => {
  try {
    const { area } = req.params;

    if (!area) {
      return res.status(400).json({ 
        message: "El par√°metro 'area' es requerido" 
      });
    }

    const menus = await Menus.findAll({
      where: {
        areaUsuaria: {
          [Op.like]: `%${area}%`
        },
        estado: true
      },
      order: [["id", "ASC"]]
    });

    const menusJerarquicos = organizarMenusJerarquicos(menus);
    res.json(menusJerarquicos);
  } catch (error) {
    console.error("Error al obtener men√∫s por √°rea:", error);
    res.status(500).json({ message: "Error al obtener men√∫s por √°rea" });
  }
};

// Nuevo: Obtener men√∫s por sistema
export const obtenerMenusPorSistema = async (req, res) => {
  try {
    const { sistemaCode } = req.params;

    if (!sistemaCode) {
      return res.status(400).json({ 
        message: "El par√°metro 'sistemaCode' es requerido" 
      });
    }

    const menus = await Menus.findAll({
      where: {
        sistemaCode: sistemaCode,
        estado: true
      },
      order: [["id", "ASC"]]
    });

    const menusJerarquicos = organizarMenusJerarquicos(menus);
    res.json(menusJerarquicos);
  } catch (error) {
    console.error("Error al obtener men√∫s por sistema:", error);
    res.status(500).json({ message: "Error al obtener men√∫s por sistema" });
  }
};

// Funci√≥n auxiliar para organizar men√∫s jer√°rquicos
function organizarMenusJerarquicos(menus) {
  const menuMap = new Map();
  const menusPadres = [];

  // Crear mapa de men√∫s
  menus.forEach(menu => {
    menuMap.set(menu.id, { ...menu.toJSON(), hijos: [] });
  });

  // Organizar jerarqu√≠a
  menus.forEach(menu => {
    const menuItem = menuMap.get(menu.id);
    
    if (menu.padreId && menuMap.has(menu.padreId)) {
      // Es un submen√∫
      menuMap.get(menu.padreId).hijos.push(menuItem);
    } else {
      // Es un men√∫ padre
      menusPadres.push(menuItem);
    }
  });

  return menusPadres;
}

// Nuevo: Poblar men√∫s desde tabla de datos
export const poblarMenusDesdeTabla = async (req, res) => {
  try {
    console.log('üöÄ Iniciando poblaci√≥n de men√∫s...');
    
    // Primero, crear/verificar que existen los roles b√°sicos
    const rolesBasicos = [
      { id: 1, descripcion: 'Administrador', estado: true },
      { id: 2, descripcion: 'Atenci√≥n Cliente', estado: true },
      { id: 3, descripcion: 'Tesorer√≠a y Caja', estado: true },
      { id: 4, descripcion: 'Contabilidad', estado: true },
      { id: 5, descripcion: 'Gesti√≥n de Personal', estado: true }
    ];

    console.log('üìù Creando/verificando roles b√°sicos...');
    for (const rol of rolesBasicos) {
      try {
        const [rolCreado, created] = await Roles.findOrCreate({
          where: { id: rol.id },
          defaults: rol
        });
        console.log(`Rol ${rol.descripcion}: ${created ? 'creado' : 'ya existe'}`);
      } catch (error) {
        console.error(`‚ùå Error al crear/verificar rol ${rol.descripcion}:`, error.message);
      }
    }

    console.log('üè¢ Creando/verificando sistema b√°sico...');
    // Verificar/crear sistema b√°sico
    const [sistemaCreado, sistemaCreated] = await Sistemas.findOrCreate({
      where: { id: 1 },
      defaults: { 
        id: 1, 
        descripcion: 'Sistema Principal', 
        estado: true 
      }
    });
    console.log(`Sistema: ${sistemaCreated ? 'creado' : 'ya existe'}`);

    // Datos basados en la tabla proporcionada
    const datosMenu = [
      // Atenci√≥n Cliente
      { descripcion: "Atenci√≥n Cliente", areaUsuaria: "1.- Atenci√≥n Cliente", sistemaCode: "ORACLE", ruta: "Contratos / Inf. Financiera", routePath: "/home/contratos-financiera", icon: "customer_service" },
      { descripcion: "Atenci√≥n Cliente", areaUsuaria: "1.- Atenci√≥n Cliente", sistemaCode: "CLIPPER-TNEW0000", ruta: "Consultas / Contratos", routePath: "/home/consultas-contratos", icon: "search" },
      { descripcion: "Atenci√≥n Cliente", areaUsuaria: "1.- Atenci√≥n Cliente", sistemaCode: "CLIPPER-PARQUE1", ruta: "Documentos / Contratos", routePath: "/home/documentos-contratos", icon: "document" },
      { descripcion: "Atenci√≥n Cliente", areaUsuaria: "1.- Atenci√≥n Cliente", sistemaCode: "HMIS", ruta: "Contratos / Contratos", routePath: "/home/hmis-contratos", icon: "contract" },
      
      // Tesorer√≠a y Caja
      { descripcion: "Tesorer√≠a y Caja", areaUsuaria: "2.- Tesorer√≠a y Caja", sistemaCode: "EXACTUS", ruta: "CxP / TRN / Documentos", routePath: "/home/cxp-documentos", icon: "payment" },
      { descripcion: "Tesorer√≠a y Caja", areaUsuaria: "2.- Tesorer√≠a y Caja", sistemaCode: "EXACTUS", ruta: "CxP / RST / RCXP / Detalle de Movimientos por Pagar", routePath: "/home/detalle-movimientos", icon: "receipt" },
      { descripcion: "Tesorer√≠a y Caja", areaUsuaria: "2.- Tesorer√≠a y Caja", sistemaCode: "EXACTUS", ruta: "CG / RST / LO / MC / Reporte de Movimientos Contables", routePath: "/home/movimientos-contables", icon: "accounting" },
      
      // Contabilidad - m√∫ltiples entradas
      { descripcion: "Contabilidad", areaUsuaria: "4.- Contabilidad", sistemaCode: "EXACTUS", ruta: "CG / CO / De Cuentas Contables", routePath: "/home/cuentas-contables", icon: "account_balance" },
      { descripcion: "Libro Mayor", areaUsuaria: "4.- Contabilidad", sistemaCode: "EXACTUS", ruta: "CG / CO / Libro Mayor", routePath: "/home/libro-mayor", icon: "book", padreId: null },
      { descripcion: "Asientos", areaUsuaria: "4.- Contabilidad", sistemaCode: "EXACTUS", ruta: "CG / CO / Del Mayor / Asientos", routePath: "/home/libro-mayor/asientos", icon: "edit", padreId: "LIBRO_MAYOR" },
      { descripcion: "Balance de Comprobaci√≥n", areaUsuaria: "4.- Contabilidad", sistemaCode: "EXACTUS", ruta: "CG / RST / LO / Balance de Comprobacion", routePath: "/home/balance-comprobacion", icon: "balance" },
      
      // Gesti√≥n de Personal
      { descripcion: "Gesti√≥n de Personal", areaUsuaria: "5.- Gesti√≥n de Personal", sistemaCode: "EXACTUS", ruta: "GN / Favoritos / Acciones de Personal", routePath: "/home/acciones-personal", icon: "people" },
      { descripcion: "Contratos Personal", areaUsuaria: "5.- Gesti√≥n de Personal", sistemaCode: "EXACTUS", ruta: "GN /Favoritos / Contratos", routePath: "/home/contratos-personal", icon: "assignment" },
      { descripcion: "Planilla", areaUsuaria: "5.- Gesti√≥n de Personal", sistemaCode: "EXCEL", ruta: "Planillon", routePath: "/home/planilla", icon: "spreadsheet" },
    ];

    console.log(`üóëÔ∏è Limpiando tablas relacionadas...`);
    // Limpiar tablas relacionadas primero (solo para desarrollo)
    await RolSistemaMenu.destroy({ where: {} });
    await Menus.destroy({ where: {} });
    console.log('‚úÖ Tablas limpiadas');

    console.log(`üìã Insertando ${datosMenu.length} men√∫s...`);
    // Insertar men√∫s
    const menusCreados = [];
    
    for (const menu of datosMenu) {
      try {
        console.log(`Creando men√∫: ${menu.descripcion} - ${menu.ruta}`);
        const menuCreado = await Menus.create(menu);
        menusCreados.push(menuCreado);
        console.log(`‚úÖ Men√∫ creado con ID: ${menuCreado.id}`);
      } catch (error) {
        console.error(`‚ùå Error al crear men√∫: ${menu.descripcion}`, error.message);
      }
    }

    console.log(`üîó Creando relaciones rol-sistema-men√∫...`);
    // Crear relaciones rol-sistema-men√∫
    // Rol 1 = Administrador (acceso a TODOS los men√∫s)
    const relacionesCreadas = [];
    
    for (const menu of menusCreados) {
      try {
        console.log(`Asignando men√∫ ${menu.descripcion} al rol 1 (admin)`);
        // SIEMPRE asignar todos los men√∫s al rol 1 (administrador) 
        const relacionAdmin = await RolSistemaMenu.create({
          rolId: 1,
          sistemaId: 1, 
          menuId: menu.id,
          estado: true
        });
        relacionesCreadas.push(relacionAdmin);

        // Tambi√©n crear relaciones espec√≠ficas por √°rea para otros roles
        if (menu.areaUsuaria === "1.- Atenci√≥n Cliente") {
          await RolSistemaMenu.create({
            rolId: 2, // Rol de Atenci√≥n Cliente
            sistemaId: 1,
            menuId: menu.id,
            estado: true
          });
        } else if (menu.areaUsuaria === "2.- Tesorer√≠a y Caja") {
          await RolSistemaMenu.create({
            rolId: 3, // Rol de Tesorer√≠a
            sistemaId: 1,
            menuId: menu.id,
            estado: true
          });
        } else if (menu.areaUsuaria === "4.- Contabilidad") {
          await RolSistemaMenu.create({
            rolId: 4, // Rol de Contabilidad
            sistemaId: 1,
            menuId: menu.id,
            estado: true
          });
        } else if (menu.areaUsuaria === "5.- Gesti√≥n de Personal") {
          await RolSistemaMenu.create({
            rolId: 5, // Rol de Recursos Humanos
            sistemaId: 1,
            menuId: menu.id,
            estado: true
          });
        }
        console.log(`‚úÖ Relaciones creadas para men√∫: ${menu.descripcion}`);
      } catch (error) {
        console.error(`‚ùå Error al crear relaci√≥n para men√∫ ${menu.descripcion}:`, error.message);
      }
    }

    console.log(`üéâ Proceso completado: ${menusCreados.length} men√∫s y ${relacionesCreadas.length} relaciones`);
    res.status(201).json({
      message: `Se crearon ${menusCreados.length} men√∫s y ${relacionesCreadas.length} relaciones exitosamente`,
      menus: menusCreados,
      relaciones: relacionesCreadas.length
    });
  } catch (error) {
    console.error("‚ùå Error al poblar men√∫s:", error);
    res.status(500).json({ message: "Error al poblar men√∫s desde tabla", error: error.message });
  }
};

export const agregarMenu = async (req, res) => {
  try {
    const { descripcion, padreId, icon, ruta, areaUsuaria, sistemaCode, routePath, estado = true } = req.body;

    // Validaci√≥n b√°sica
    if (!descripcion) {
      return res.status(400).json({ message: "El campo 'descripcion' es obligatorio." });
    }

    // Si hay padreId, validar que exista
    if (padreId) {
      const padre = await Menus.findByPk(padreId);
      if (!padre) {
        return res.status(400).json({ message: `No se encontr√≥ el men√∫ padre con ID ${padreId}` });
      }
    }

    // Crear el men√∫
    const nuevoMenu = await Menus.create({ 
      descripcion, 
      padreId, 
      icon, 
      ruta, 
      areaUsuaria, 
      sistemaCode, 
      routePath, 
      estado 
    });

    res.status(201).json({
      message: "Men√∫ agregado exitosamente",
      menu: nuevoMenu,
    });
  } catch (error) {
    console.error("Error al guardar el men√∫:", error);
    res.status(500).json({ message: "Error al guardar el men√∫" });
  }
};

export const editarMenu = async (req, res) => {
  try {
    const { id, descripcion, padreId, icon, ruta, areaUsuaria, sistemaCode, routePath, estado } = req.body;

    if (!id) {
      return res.status(400).json({ message: "El campo 'id' es obligatorio." });
    }

    const menu = await Menus.findByPk(id);
    if (!menu) {
      return res.status(404).json({ message: "Men√∫ no encontrado." });
    }

    // Verificar que no se asigne como su propio padre
    if (padreId && padreId === id) {
      return res.status(400).json({ message: "Un men√∫ no puede ser su propio padre." });
    }

    // Si se pasa padreId, validar que exista
    if (padreId) {
      const padre = await Menus.findByPk(padreId);
      if (!padre) {
        return res.status(400).json({ message: `El men√∫ padre con ID ${padreId} no existe.` });
      }
    }

    // Actualizaci√≥n segura solo de los campos permitidos
    await menu.update({
      descripcion: descripcion ?? menu.descripcion,
      padreId: padreId ?? menu.padreId,
      icon: icon ?? menu.icon,
      ruta: ruta ?? menu.ruta,
      areaUsuaria: areaUsuaria ?? menu.areaUsuaria,
      sistemaCode: sistemaCode ?? menu.sistemaCode,
      routePath: routePath ?? menu.routePath,
      estado: estado ?? menu.estado,
    });

    res.json({
      message: "Men√∫ actualizado correctamente",
      menu,
    });
  } catch (error) {
    console.error("Error al actualizar el men√∫:", error);
    res.status(500).json({ message: "Error al actualizar el men√∫" });
  }
};

export const eliminarMenu = async (req, res) => {
 try {
    const { id } = req.params;

    if (!id) {
      return res.status(400).json({ message: "El campo 'id' es obligatorio." });
    }

    const menu = await Menus.findByPk(id);
    if (!menu) {
      return res.status(404).json({ message: "Men√∫ no encontrado." });
    }

    // Validar si tiene submen√∫s activos
    const submen√∫sActivos = await Menus.findAll({
      where: { padreId: id, estado: true }
    });

    if (submen√∫sActivos.length > 0) {
      return res.status(400).json({ 
        message: "No se puede desactivar este men√∫ porque tiene submen√∫s activos." 
      });
    }

    // Cambiar estado a false (desactivado)
    await menu.update({ estado: false });

    res.json({ message: "Men√∫ desactivado correctamente." });
  } catch (error) {
    console.error("Error al desactivar el men√∫:", error);
    res.status(500).json({ message: "Error al desactivar el men√∫" });
  }
};


